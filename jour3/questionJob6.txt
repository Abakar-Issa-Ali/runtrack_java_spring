Comment la méthode save de Spring Data JPA peut-elle être utilisée à la fois pour la création et la mise à jour ?
La méthode save() de Spring Data JPA est polyvalente et peut être utilisée à la fois pour la création et la mise à jour d'entités, ce qui la rend particulièrement pratique.
Voici comment elle fonctionne:

Détection automatique des nouvelles entités vs. entités existantes:

Si l'objet entité n'a pas d'identifiant (ID = null), Spring Data JPA considère qu'il s'agit d'une nouvelle entité et effectue une opération d'insertion (INSERT).
Si l'objet entité a un identifiant qui existe déjà dans la base de données, Spring Data JPA considère qu'il s'agit d'une mise à jour et effectue une opération de modification (UPDATE).


- Dans mon contrôleur:

Pour la création: je crée un nouvel objet Person sans ID et j'appelle save().
Pour la mise à jour: je récupère une Person existante, modifie ses propriétés, et j'appelle également save().


- Gestion de l'état des entités:

Spring Data JPA utilise le contexte de persistance pour suivre l'état des entités.
Lorsqu'une entité est chargée, puis modifiée et sauvegardée, JPA détecte les changements et génère uniquement les requêtes SQL nécessaires pour mettre à jour les champs modifiés.


- Simplification du code:

Cette approche uniforme permet d'éviter d'avoir des méthodes séparées pour l'insertion et la mise à jour.
Elle rend le code plus concis et plus facile à maintenir.